<?php

/**
 * @file
 * Preprocess functions for Stanford Starter.
 */

/**
 * Prepares variables for the html.html.twig template.
 */
function lbretransportation_subtheme_preprocess_html(&$variables) {
  $variables['stanford_basic_path'] = \Drupal::service('extension.list.theme')->getPath('stanford_basic');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function lbretransportation_subtheme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (!empty($variables['elements']['#id']) && $variables['elements']['#id'] == 'lbretransportation_subtheme_search') {
    $suggestions[] = 'block__stanford_basic_search';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function lbretransportation_subtheme_preprocess_pattern_hero(array &$variables): void {
  _attach_react_behavior_classes([
    'banner_style' => ['layout'],
    'palette' => ['color_scheme'],
  ], $variables);
}

/**
 * Retrieves React Behaviors classes and attaches them to the element.
 *
 * @param $variables
 *  Template variables for paragraph.
 * @param array $plugins
 *  Key-value object of [plugin_id => keys[]].
 *
 * @return void
 *  Nothing to return. Method mutates $variables by reference.
 *
 * @example <code>
 *   _attach_react_behavior_classes([
 *     'banner_style' => ['layout'],
 *     'palette' => ['color_scheme'],
 *   ], $variables);
 * </code>
 */
function _attach_react_behavior_classes(array $plugins, array &$variables): void {
  /** @var \Drupal\ui_patterns\Element\PatternContext $context */
  $context = &$variables['context'];
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $context->getProperty('entity');
  /** @var \Drupal\Core\Template\Attribute $attributes */
  $attributes = &$variables['attributes'];
  foreach ($plugins as $plugin_id => $keys) {
    $classes = [];
    foreach ($keys as $key) {
      $class = $paragraph->getBehaviorSetting("react_paragraphs:$plugin_id", $key);
      if ($class) {
        $classes[] = $class;
      }
    }
  }
  $attributes->addClass($classes);
}
